// one key chords
#define CHORD_1 KC_B
// ... define other chords here
// two key chords
#define CHORD_1_2 KC_L
// ... define other chords here
// three key chords
#define CHORD_1_2_3 KC_H
// ... define other chords here
// four key chords
#define CHORD_1_2_3_4 KC_I
// ... define other chords here
// five key chord
#define CHORD_1_2_3_4_5 KC_ENT

int chord_value = 0;
int first_press = 0;
static uint16_t chord_combo_timer = timer_read();
void process_chorded_key_value(int value);

void matrix_scan_user(void){
  if (timer_elapsed(chord_combo_timer) >= CHORD_TIME && chord_value != 0) {
    process_chorded_key_value(chord_value);
    chord_value = 0;
    first_chord_press = 0;
  }
}

bool process_record_user(uint16_t keycode, keyrecord_t *record){
  switch(keycode){
  case KC_CD_1:
    /* we have chord_value, first_chord_press, and chord_combo_timer globals
       which we can use and mess with. chord_value gets reset here, but
       first_chord_press and chord_value get set to 0 after we send the chorded
       key.
    */
    if (record->event.pressed){
      if (first_chord_press == 0) {
    // then we start, and must set first_chord_press to 1
    first_chord_press = 1;
    chord_value = 0;
    chord_combo_timer = timer_read();
      }
      if (timer_elapsed(chord_combo_timer) < CHORD_TIME) {
    chord_value = chord_value + 1;
      }
    }
    return false;
  // ... define other keycode behaviore here.
  }
}
/*
   the following is a giant function. i just included it in case
   someone was interested. all we really need to know is that it takes
   an integer and decodes it, then sends the appropriate key/whatever
   the user wants to do.
*/
void process_chorded_key_value(int value) {
  if (value == 1) {
    // chord 1
    tap_key(CHORD_1);
  } else if (value == 2) {
    // chord 2
    tap_key(CHORD_2);
  } else if (value == 4) {
    // chord 3
    tap_key(CHORD_3);
  } else if (value == 8) {
    // chord 4
    tap_key(CHORD_4);
  } else if (value == 16) {
    // chord 5
    tap_key(CHORD_5);
    /* END SINGLE CHORDS,
       BEGIN DOUBLE CHORDS */
  } else if (value == 3) {
    // chord 1 2
    tap_key(CHORD_1_2);
  } else if (value == 5) {
    // chord 1 3
    tap_key(CHORD_1_3);
  } else if (value == 9) {
    // chord 1 4
    tap_key(CHORD_1_4);
  } else if (value == 17) {
    // chord 1 5
    tap_key(CHORD_1_5);
  } else if (value == 6) {
    // chord 2 3
    tap_key(CHORD_2_3);
  } else if (value == 10) {
    // chord 2 4
    tap_key(CHORD_2_4);
  } else if (value == 18) {
    // chord 2 5
    tap_key(CHORD_2_5);
  } else if (value == 12) {
    // chord 3 4
    tap_key(CHORD_3_4);
  } else if (value == 20) {
    // chord 3 5
    tap_key(CHORD_3_5);
  } else if (value == 24) {
    // chord 4 5
    tap_key(CHORD_4_5);
    /* END DOUBLE CHORDS,
       BEGIN TRIPLE CHORDS */
  } else if (value == 7) {
    // chord 1 2 3
    tap_key(CHORD_1_2_3);
  } else if (value == 11) {
    // chord 1 2 4
    tap_key(CHORD_1_2_4);
  } else if (value == 19) {
    // chord 1 2 5
    tap_key(CHORD_1_2_5);
  } else if (value == 13) {
    // chord 1 3 4
    tap_key(CHORD_1_3_4);
  } else if (value == 21) {
    // chord 1 3 5
    tap_key(CHORD_1_3_5);
  } else if (value == 25) {
    // chord 1 4 5
    tap_key(CHORD_1_4_5);
  } else if (value == 14) {
    // chord 2 3 4
    tap_key(CHORD_2_3_4);
  } else if (value == 22) {
    // chord 2 3 5
    tap_key(CHORD_2_3_5);
  } else if (value == 26) {
    // chord 2 4 5
    tap_key(CHORD_2_4_5);
  } else if (value == 28) {
    // chord 3 4 5
    tap_key(CHORD_3_4_5);
    /* END TRIPLE CHORDS,
       BEGIN QUADRUPLE CHORDS */
  } else if (value == 15) {
    // chord 1 2 3 4
    tap_key(CHORD_1_2_3_4);
  } else if (value == 23) {
    // chord 1 2 3 5
    tap_key(CHORD_1_2_3_5);
  } else if (value == 27) {
    // chord 1 2 4 5
    tap_key(CHORD_1_2_4_5);
  } else if (value == 29) {
    // chord 1 3 4 5
    tap_key(CHORD_1_3_4_5);
  } else if (value == 30) {
    // chord 2 3 4 5
    tap_key(CHORD_2_3_4_5);
  } else if (value == 31) {
    // chord 1 2 3 4 5
    tap_key(CHORD_1_2_3_4_5);
  } else {
    // unknown chord, possibly incomplete.
  }
}
